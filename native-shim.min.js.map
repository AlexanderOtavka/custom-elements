{"version":3,"sources":["native-shim.min.js"],"names":["NativeHTMLElement","window","HTMLElement","nativeDefine","customElements","define","nativeGet","get","tagnameByConstructor","Map","constructorByTagname","browserConstruction","userConstruction","tagname","constructor","fakeClass","call","instance","prototype","elementClass","elementProto","StandInElement","Object","setPrototypeOf","standInProto","observedAttributes","connectedCallback","disconnectedCallback","attributeChangedCallback","adoptedCallback","set"],"mappings":"AA4DA,CAAC,IAAM,CACL,aAEA,KAAMA,GAAoBC,OAAOC,WAAjC,CACMC,EAAeF,OAAOG,cAAP,CAAsBC,MAD3C,CAEMC,EAAYL,OAAOG,cAAP,CAAsBG,GAFxC,CASMC,EAAuB,GAAIC,IATjC,CAgBMC,EAAuB,GAAID,IAhBjC,CAuBA,GAAIE,KAAJ,CAMIC,IANJ,CAQAX,OAAOC,WAAP,CAAqB,UAAW,CAC9B,GAAI,CAACS,CAAL,CAA0B,CACxB,KAAME,GAAUL,EAAqBD,GAArB,CAAyB,KAAKO,WAA9B,CAAhB,CACMC,EAAYT,EAAUU,IAAV,CAAef,OAAOG,cAAtB,CAAsCS,CAAtC,CADlB,CAIAD,IALwB,CAMxB,KAAMK,GAAW,GAAKF,EAAtB,CACA,MAAOE,EACR,CAGDN,IACD,CA/CI,CAqDLV,OAAOC,WAAP,CAAmBgB,SAAnB,CAA+BlB,EAAkBkB,SArD5C,CAuDLjB,OAAOG,cAAP,CAAsBC,MAAtB,CAA+B,CAACQ,CAAD,CAAUM,CAAV,GAA2B,CACxD,KAAMC,GAAeD,EAAaD,SAAlC,CACMG,EAAiB,aAAcrB,EAAkB,CACrDc,aAAc,CAGZ,OAHY,CAOZQ,OAAOC,cAAP,CAAsB,IAAtB,CAA4BH,CAA5B,CAPY,CASPR,CATO,GAYVD,IAZU,CAcVQ,EAAaH,IAAb,CAAkB,IAAlB,CAdU,EAgBZJ,IACD,CAlBoD,CADvD,CAqBMY,EAAeH,EAAeH,SArBpC,CAsBAG,EAAeI,kBAAf,CAAoCN,EAAaM,kBAvBO,CAwBxDD,EAAaE,iBAAb,CAAiCN,EAAaM,iBAxBU,CAyBxDF,EAAaG,oBAAb,CAAoCP,EAAaO,oBAzBO,CA0BxDH,EAAaI,wBAAb,CAAwCR,EAAaQ,wBA1BG,CA2BxDJ,EAAaK,eAAb,CAA+BT,EAAaS,eA3BY,CA6BxDrB,EAAqBsB,GAArB,CAAyBX,CAAzB,CAAuCN,CAAvC,CA7BwD,CA8BxDH,EAAqBoB,GAArB,CAAyBjB,CAAzB,CAAkCM,CAAlC,CA9BwD,CA+BxDhB,EAAaa,IAAb,CAAkBf,OAAOG,cAAzB,CAAyCS,CAAzC,CAAkDQ,CAAlD,CACD,CAvFI,CAyFLpB,OAAOG,cAAP,CAAsBG,GAAtB,CAA6BM,CAAD,EAAaH,EAAqBH,GAArB,CAAyBM,CAAzB,CAE1C,CA3FD,G","file":"native-shim.min.js","sourcesContent":["/**\n * @license\n * Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n */\n\n/**\n * This shim allows elements written in, or compiled to, ES5 to work on native\n * implementations of Custom Elements.\n *\n * ES5-style classes don't work with native Custom Elements because the\n * HTMLElement constructor uses the value of `new.target` to look up the custom\n * element definition for the currently called constructor. `new.target` is only\n * set when `new` is called and is only propagated via super() calls. super()\n * is not emulatable in ES5. The pattern of `SuperClass.call(this)`` only works\n * when extending other ES5-style classes, and does not propagate `new.target`.\n *\n * This shim allows the native HTMLElement constructor to work by generating and\n * registering a stand-in class instead of the users custom element class. This\n * stand-in class's constructor has an actual call to super().\n * `customElements.define()` and `customElements.get()` are both overridden to\n * hide this stand-in class from users.\n *\n * In order to create instance of the user-defined class, rather than the stand\n * in, the stand-in's constructor swizzles its instances prototype and invokes\n * the user-defined constructor. When the user-defined constructor is called\n * directly it creates an instance of the stand-in class to get a real extension\n * of HTMLElement and returns that.\n *\n * There are two important constructors: A patched HTMLElement constructor, and\n * the StandInElement constructor. They both will be called to create an element\n * but which is called first depends on whether the browser creates the element\n * or the user-defined constructor is called directly. The variables\n * `browserConstruction` and `userConstruction` control the flow between the\n * two constructors.\n *\n * This shim should be better than forcing the polyfill because:\n *   1. It's smaller\n *   2. All reaction timings are the same as native (mostly synchronous)\n *   3. All reaction triggering DOM operations are automatically supported\n *\n * There are some restrictions and requirements on ES5 constructors:\n *   1. All constructors in a inheritance hierarchy must be ES5-style, so that\n *      they can be called with Function.call(). This effectively means that the\n *      whole application must be compiled to ES5.\n *   2. Constructors must return the value of the emulated super() call. Like\n *      `return SuperClass.call(this)`\n *   3. The `this` reference should not be used before the emulated super() call\n *      just like `this` is illegal to use before super() in ES6.\n *   4. Constructors should not create other custom elements before the emulated\n *      super() call. This is the same restriction as with native custom\n *      elements.\n *\n *  Compiling valid class-based custom elements to ES5 will satisfy these\n *  requirements with the latest version of popular transpilers.\n */\n(() => {\n  'use strict';\n\n  const NativeHTMLElement = window.HTMLElement;\n  const nativeDefine = window.customElements.define;\n  const nativeGet = window.customElements.get;\n\n  /**\n   * Map of user-provided constructors to tag names.\n   *\n   * @type {Map<Function, string>}\n   */\n  const tagnameByConstructor = new Map();\n\n  /**\n   * Map of tag names to user-provided constructors.\n   *\n   * @type {Map<string, Function>}\n   */\n  const constructorByTagname = new Map();\n\n\n  /**\n   * Whether the constructors are being called by a browser process, ie parsing\n   * or createElement.\n   */\n  let browserConstruction = false;\n\n  /**\n   * Whether the constructors are being called by a user-space process, ie\n   * calling an element constructor.\n   */\n  let userConstruction = false;\n\n  window.HTMLElement = function() {\n    if (!browserConstruction) {\n      const tagname = tagnameByConstructor.get(this.constructor);\n      const fakeClass = nativeGet.call(window.customElements, tagname);\n\n      // Make sure that the fake constructor doesn't call back to this constructor\n      userConstruction = true;\n      const instance = new (fakeClass)();\n      return instance;\n    }\n    // Else do nothing. This will be reached by ES5-style classes doing\n    // HTMLElement.call() during initialization\n    browserConstruction = false;\n  };\n  // By setting the patched HTMLElement's prototype property to the native\n  // HTMLElement's prototype we make sure that:\n  //     document.createElement('a') instanceof HTMLElement\n  // works because instanceof uses HTMLElement.prototype, which is on the\n  // ptototype chain of built-in elements.\n  window.HTMLElement.prototype = NativeHTMLElement.prototype;\n\n  window.customElements.define = (tagname, elementClass) => {\n    const elementProto = elementClass.prototype;\n    const StandInElement = class extends NativeHTMLElement {\n      constructor() {\n        // Call the native HTMLElement constructor, this gives us the\n        // under-construction instance as `this`:\n        super();\n\n        // The prototype will be wrong up because the browser used our fake\n        // class, so fix it:\n        Object.setPrototypeOf(this, elementProto);\n\n        if (!userConstruction) {\n          // Make sure that user-defined constructor bottom's out to a do-nothing\n          // HTMLElement() call\n          browserConstruction = true;\n          // Call the user-defined constructor on our instance:\n          elementClass.call(this);\n        }\n        userConstruction = false;\n      }\n    };\n    const standInProto = StandInElement.prototype;\n    StandInElement.observedAttributes = elementClass.observedAttributes;\n    standInProto.connectedCallback = elementProto.connectedCallback;\n    standInProto.disconnectedCallback = elementProto.disconnectedCallback;\n    standInProto.attributeChangedCallback = elementProto.attributeChangedCallback;\n    standInProto.adoptedCallback = elementProto.adoptedCallback;\n\n    tagnameByConstructor.set(elementClass, tagname);\n    constructorByTagname.set(tagname, elementClass);\n    nativeDefine.call(window.customElements, tagname, StandInElement);\n  };\n\n  window.customElements.get = (tagname) => constructorByTagname.get(tagname);\n\n})();\n"]}